using System;
using System.IO;
using Scripter.Core;
using Scripter.Core.Services;
using Scripter.Infrastructure.Console;
using Scripter.Infrastructure.FileSystem;

namespace Scripter.UnitTests
{
    public class FileTestRunner
    {
        public static void RunFileTests()
        {
            Console.WriteLine("=== –¢–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ tests ===\n");

            int testsPassed = 0;
            int testsFailed = 0;

            // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            string[] sharpFiles = {
                "basic_test.sharp",
                "simple_test.sharp", 
                "minimal_test.sharp",
                "function_test.sharp",
                "working_test.sharp",
                "simple_example.sharp",
                "simple_function.sharp",
                "test_function_call.sharp",
                "demo_registered_functions.sharp",
                "plugin_example.sharp"
            };

            string[] csFiles = {
                "RegistrationDemo.cs"
            };

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º .sharp —Ñ–∞–π–ª—ã
            foreach (var fileName in sharpFiles)
            {
                try
                {
                    Console.WriteLine($"--- –¢–µ—Å—Ç —Ñ–∞–π–ª–∞: {fileName} ---");
                    
                    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                    string filePath = Path.Combine("tests", fileName);
                    string scriptContent = File.ReadAllText(filePath);
                    
                    if (string.IsNullOrEmpty(scriptContent))
                    {
                        Console.WriteLine($"‚ùå –§–∞–π–ª {fileName} –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
                        testsFailed++;
                        continue;
                    }

                    Console.WriteLine($"‚úÖ –§–∞–π–ª {fileName} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω ({scriptContent.Length} —Å–∏–º–≤–æ–ª–æ–≤)");

                    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
                    var console = new TestConsole();
                    var fileService = new FileService();
                    var scriptService = new ScriptService(fileService, console);
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
                    scriptService.ExecuteScript(scriptContent);
                    
                    Console.WriteLine($"‚úÖ –°–∫—Ä–∏–ø—Ç {fileName} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥ –∫–æ–Ω—Å–æ–ª–∏
                    if (console.Output.Count > 0)
                    {
                        Console.WriteLine($"üìù –í—ã–≤–æ–¥: {string.Join("; ", console.Output)}");
                    }
                    
                    testsPassed++;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {fileName}: {ex.Message}");
                    testsFailed++;
                }
            }

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º .cs —Ñ–∞–π–ª—ã
            foreach (var fileName in csFiles)
            {
                try
                {
                    Console.WriteLine($"--- –¢–µ—Å—Ç —Ñ–∞–π–ª–∞: {fileName} ---");
                    
                    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                    string filePath = Path.Combine("tests", fileName);
                    string fileContent = File.ReadAllText(filePath);
                    
                    if (string.IsNullOrEmpty(fileContent))
                    {
                        Console.WriteLine($"‚ùå –§–∞–π–ª {fileName} –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
                        testsFailed++;
                        continue;
                    }

                    Console.WriteLine($"‚úÖ –§–∞–π–ª {fileName} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω ({fileContent.Length} —Å–∏–º–≤–æ–ª–æ–≤)");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É C# —Ñ–∞–π–ª–∞
                    bool hasUsing = fileContent.Contains("using");
                    bool hasNamespace = fileContent.Contains("namespace");
                    bool hasClass = fileContent.Contains("class");
                    
                    Console.WriteLine($"üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞: using={hasUsing}, namespace={hasNamespace}, class={hasClass}");
                    
                    testsPassed++;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {fileName}: {ex.Message}");
                    testsFailed++;
                }
            }

            Console.WriteLine($"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ ===");
            Console.WriteLine($"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {testsPassed}");
            Console.WriteLine($"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {testsFailed}");
            Console.WriteLine($"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {testsPassed + testsFailed}");

            if (testsFailed == 0)
            {
                Console.WriteLine("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!");
            }
            else
            {
                Console.WriteLine("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.");
            }
        }

        // –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
        public class TestConsole : IScripterConsole
        {
            public System.Collections.Generic.List<string> Output { get; } = new System.Collections.Generic.List<string>();

            public void Write(string value)
            {
                Console.Write(value);
            }

            public void WriteLine(string message)
            {
                Output.Add(message);
                Console.WriteLine($"[OUTPUT] {message}");
            }

            public void WriteLine()
            {
                Console.WriteLine();
            }

            public void WriteLine(object value)
            {
                WriteLine(value?.ToString() ?? "null");
            }

            public string ReadLine()
            {
                return "test input";
            }

            public int Read()
            {
                return 0;
            }

            public bool IsInputRedirected => false;
        }
    }
}
